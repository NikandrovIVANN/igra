import json
from core.mixins import LoggerMixin, SerializableMixin
from .turn_order import TurnOrder


class Boss(LoggerMixin, SerializableMixin):
    """–ö–ª–∞—Å—Å –ë–æ—Å—Å–∞"""

    def __init__(self, name, level=10):
        self.name = name
        self.level = level
        LoggerMixin.__init__(self)

        # –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        self.max_hp = 400
        self.hp = 400
        self.max_mp = 200
        self.mp = 200
        self.strength = 60
        self.agility = 30
        self.intelligence = 40
        self.effects = []

    @property
    def is_alive(self):
        return self.hp > 0

    def take_damage(self, damage):
        """–ù–∞–Ω–µ—Å–µ–Ω–∏–µ —É—Ä–æ–Ω–∞ –±–æ—Å—Å—É"""
        self.hp -= damage
        self.hp = max(0, self.hp)
        return self.hp <= 0

    def restore_hp(self, amount):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ HP"""
        self.hp = min(self.hp + amount, self.max_hp)

    def choose_action(self, targets):
        """–í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –±–æ—Å—Å–∞"""
        alive_targets = [t for t in targets if t.is_alive]
        if not alive_targets:
            return "–ë–æ—Å—Å –Ω–µ –≤–∏–¥–∏—Ç —Ü–µ–ª–µ–π –¥–ª—è –∞—Ç–∞–∫–∏"

        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –±–æ—Å—Å–∞
        import random

        # –ï—Å–ª–∏ HP –º–∞–ª–æ - –ª–µ—á–∏—Ç—Å—è
        if self.hp < self.max_hp * 0.3 and self.mp >= 20:
            self.mp -= 20
            heal_amount = self.intelligence * 1.5
            old_hp = self.hp
            self.restore_hp(heal_amount)
            actual_heal = self.hp - old_hp
            return f"–ë–æ—Å—Å –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç {actual_heal:.1f} HP"

        # –ò–Ω–∞—á–µ –∞—Ç–∞–∫—É–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —Ü–µ–ª—å
        target = random.choice(alive_targets)
        damage = self.strength * 1.8
        target.take_damage(damage)
        return f"–ë–æ—Å—Å –∞—Ç–∞–∫—É–µ—Ç {target.name}! –£—Ä–æ–Ω: {damage:.1f}"

    def update_effects(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤"""
        for effect in self.effects[:]:
            effect.duration -= 1
            if effect.duration <= 0:
                self.effects.remove(effect)
                if hasattr(effect, 'remove'):
                    effect.remove(self)

    def add_effect(self, effect):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞"""
        self.effects.append(effect)
        if hasattr(effect, 'apply'):
            effect.apply(self)

    def __str__(self):
        return f"üëπ {self.name} - HP: {self.hp}/{self.max_hp}"


class Battle(LoggerMixin, SerializableMixin):
    """–ö–ª–∞—Å—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ–µ–º"""

    def __init__(self, party, boss):
        LoggerMixin.__init__(self)
        self.party = party
        self.boss = boss
        self.turn_order = None
        self.round_number = 0
        self.is_battle_over = False
        self.winner = None

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Ä—è–¥–∫–∞ —Ö–æ–¥–æ–≤
        self.update_turn_order()

    def update_turn_order(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ —Ö–æ–¥–æ–≤"""
        all_participants = self.party + [self.boss]
        self.turn_order = TurnOrder(all_participants)

    def process_effects(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –≤ –Ω–∞—á–∞–ª–µ —Ä–∞—É–Ω–¥–∞"""
        self.add_log(f"\n--- –†–∞—É–Ω–¥ {self.round_number} ---")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        for participant in self.party + [self.boss]:
            if participant.is_alive:
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
                participant.update_effects()

                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É–ª–¥–∞—É–Ω–æ–≤
                if hasattr(participant, 'update_cooldown'):
                    participant.update_cooldown()

                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ–º–æ—Ç—ã
                if hasattr(participant, 'update_silence'):
                    participant.update_silence()

    def check_battle_end(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –æ–∫–æ–Ω—á–∞–Ω–∏—è –±–∏—Ç–≤—ã"""
        party_alive = any(char.is_alive for char in self.party)
        boss_alive = self.boss.is_alive

        if not party_alive:
            self.is_battle_over = True
            self.winner = "boss"
            self.add_log("üíÄ –ë–æ—Å—Å –ø–æ–±–µ–∂–¥–∞–µ—Ç! –í—Å–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –º–µ—Ä—Ç–≤—ã.")
            return True

        if not boss_alive:
            self.is_battle_over = True
            self.winner = "party"
            self.add_log("üéâ –ü–æ–±–µ–¥–∞! –ë–æ—Å—Å –ø–æ–≤–µ—Ä–∂–µ–Ω!")
            return True

        return False

    def play_round(self):
        """–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞ –±–æ—è"""
        if self.is_battle_over:
            return

        self.round_number += 1
        self.process_effects()

        if self.check_battle_end():
            return

        # –•–æ–¥—ã –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        for participant in self.turn_order:
            if self.check_battle_end():
                break

            if not participant.is_alive:
                continue

            self.add_log(f"\n–•–æ–¥ {participant.name}:")

            if participant == self.boss:
                # –•–æ–¥ –±–æ—Å—Å–∞
                action_result = self.boss.choose_action(self.party)
                self.add_log(action_result)
            else:
                # –•–æ–¥ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
                self.player_turn(participant)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–µ—Ü –±–æ—è –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ö–æ–¥–∞
            if self.check_battle_end():
                break

    def player_turn(self, character):
        """–•–æ–¥ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        alive_targets = [t for t in self.party + [self.boss] if t != character and t.is_alive]

        if not alive_targets:
            self.add_log(f"{character.name} –Ω–µ –≤–∏–¥–∏—Ç —Ü–µ–ª–µ–π –¥–ª—è –∞—Ç–∞–∫–∏")
            return

        try:
            # 70% —à–∞–Ω—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–∑–æ–≤—É—é –∞—Ç–∞–∫—É, 30% - –Ω–∞–≤—ã–∫
            import random
            if random.random() < 0.7 or character.mp < 20:
                # –ë–∞–∑–æ–≤–∞—è –∞—Ç–∞–∫–∞
                target = self.boss if self.boss.is_alive else alive_targets[0]
                result = character.basic_attack(target)
            else:
                # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞–≤—ã–∫–∞
                from characters.healer import Healer
                if isinstance(character, Healer):
                    # –õ–µ–∫–∞—Ä—å –ª–µ—á–∏—Ç —Å–∞–º–æ–≥–æ —Ä–∞–Ω–µ–Ω–æ–≥–æ —Å–æ—é–∑–Ω–∏–∫–∞
                    wounded_allies = [p for p in self.party if p.is_alive and p.hp < p.max_hp * 0.8]
                    target = min(wounded_allies, key=lambda x: x.hp) if wounded_allies else character
                else:
                    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∞—Ç–∞–∫—É—é—Ç –±–æ—Å—Å–∞ –∏–ª–∏ —Å–ª—É—á–∞–π–Ω—É—é —Ü–µ–ª—å
                    target = self.boss if self.boss.is_alive else alive_targets[0]

                result = character.use_skill(target)

            self.add_log(result)

        except Exception as e:
            self.add_log(f"{character.name} –Ω–µ –º–æ–∂–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å: {e}")

    def save_state(self, filename):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—è –≤ —Ñ–∞–π–ª"""
        state = {
            'round_number': self.round_number,
            'party': [char.to_dict() for char in self.party],
            'boss': self.boss.to_dict(),
            'winner': self.winner
        }

        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(state, f, indent=2, ensure_ascii=False)

        self.add_log(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {filename}")

    def display_status(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—è"""
        self.add_log("\n=== –¢–ï–ö–£–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï ===")

        for char in self.party:
            status = "üíÄ –ú–ï–†–¢–í" if not char.is_alive else "‚ù§Ô∏è –ñ–ò–í"
            self.add_log(f"{char} | {status}")

        boss_status = "üíÄ –ú–ï–†–¢–í" if not self.boss.is_alive else "‚ù§Ô∏è –ñ–ò–í"
        self.add_log(f"{self.boss} | {boss_status}")